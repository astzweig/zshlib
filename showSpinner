#!/usr/bin/env zsh
# vi: set expandtab ft=zsh tw=80 ts=2

function _zshlib_showSpinner_spin() {
  local stop=false
  local i=0 j=0 k=0 pos=0 spinlen=0 dursplit=0

  let "spinlen = ${#spinner} / width"
  let "dursplit = ${duration} / 0.1"
  trap 'stop=true' TERM
  while true; do
    for (( i=0; i < $spinlen; i++ )); do
      let "pos = i * width"
      print -n -- ${spinner:$pos:$width}
      tput cub $width
      for (( k=0; k <= $dursplit; k++ )); do
        [ $stop = true ] && break 3
        sleep 0.1
      done
    done
  done
  tput el
}

function showSpinner() {
  setopt localoptions nomonitor
  local duration_default=0.2 width_default=3 spinner_default='.  .. ...   '
  eval "`docopts -f -V - -h - : "$@" <<- USAGE
	Usage: $0 [options] <func>
	
	Show a spinner at the current cursor position, while func is running. Hides
	the cursor while the spinner is running and shows it again afterwards if the
	environment variable TERMINAL_CURSOR_HIDDEN is not set or has no value.
	
	Options:
	  -d TIME, --duration TIME   The duration that each spinner sequence shall be shown
	                             in seconds. Must be greater or equal than 0.1. [default: $duration_default]
	  -s CHARS, --spinner CHARS  The spinner characters. [default: $spinner_default]
	  -w WIDTH, --width WIDTH    Amount of characters to use as a single sequence of
	                             spinner. Must be greater or equal 1. [default: $width_default]
	----
	$0 0.1.0
	Copyright (C) 2022 Rezart Qelibari, Astzweig GmbH & Co. KG
	License EUPL-1.2. There is NO WARRANTY, to the extent permitted by law.
	USAGE`"
  local result=0
  if test -t 1; then
    (( duration >= 0.1 )) || return 10
    (( width >= 1 )) || return 11
    trap '[ -t 1 ] && [ -z "${TERMINAL_CURSOR_HIDDEN}" ] && tput cnorm; stty '"$(stty -g 2> /dev/null)"'2> /dev/null' INT TERM EXIT
    [ -t 1 ] && tput civis; stty -echo 2> /dev/null
    _zshlib_showSpinner_spin &
    local jobId=$!
  fi

  ${(s.,.)func} >&! /dev/null
  result=$?

  if test -t 1; then
    kill -s TERM $jobId
    wait $jobId
  fi
  return $result
}

if [[ "${ZSH_EVAL_CONTEXT}" == toplevel ]]; then
  print "$0: This command has no functionality if called by its own. Either source it or autoload it." >&2
  exit 64
elif [[ "${ZSH_EVAL_CONTEXT}" == *loadautofunc ]]; then
  showSpinner "$@"
fi
