#!/usr/bin/env zsh
# vi: set expandtab ft=zsh tw=80 ts=2

function _zshlib_traps_removeElementsByPattern() {
  local -A matches=()
  for name cmd in ${(kv)traps}; do
    [[ ${name} =~ ${pat} ]] && continue
    matches+=(${name} ${cmd})
  done
  traps=(${(kv)matches})
}

function traps() {
  eval "`docopts -f -V - -h - : "$@" <<- USAGE
	Usage:
	  $0 add <name> <cmd> [<signals>...]
	  $0 clear [<signals>...]
	  $0 remove <name> [<signals>...]
	  $0 call [<signals>...]
	
	A trap handler for zsh scripts. This function needs a traps associative
	array defined in the outer scope. Signals may be any of exit, int, term. If no
	signal is given, every signal is assumed.
	----
	$0 0.1.0
	Copyright (C) 2022 Rezart Qelibari, Astzweig GmbH & Co. KG
	License EUPL-1.2. There is NO WARRANTY, to the extent permitted by law.
	USAGE`"
  local signal= pat=
  if [[ ${add} = true ]]; then
    [[ ${#signals} -eq 0 ]] && signals+=(all)
    for signal in ${signals}; do
      traps+=(${name}_${signal} ${cmd})
    done

  elif [[ ${clear} = true || ${remove} = true ]]; then
    [[ ${#signals} -eq 0 ]] && signals+=(exit int term)
    signals+=(all)
    pat='_('${(j.|.)signals}')$'
    [[ ${remove} = true ]] && pat='^'${name}${pat}
    _zshlib_traps_removeElementsByPattern

  elif [[ ${call} = true ]]; then
    [[ ${#signals} -eq 0 ]] && signals+=(exit int term)
    signals+=(all)
    pat='_('${(j.|.)signals}')$'
    for name cmd in ${(kv)traps}; do
      [[ ${name} =~ ${pat} ]] || continue
      eval ${cmd}
    done
  fi
}

if [[ "${ZSH_EVAL_CONTEXT}" == toplevel ]]; then
  print "$0: This command has no functionality if called by its own. Either source or autoload it." >&2
  traps --help
  exit 64
elif [[ "${ZSH_EVAL_CONTEXT}" == *loadautofunc ]]; then
  traps "$@"
fi
